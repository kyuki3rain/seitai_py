{"version":3,"sources":["reportWebVitals.js","eel.js","Init.js","App.js","RealtimeLineChart.js","graph.js","Main.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","eel","window","Init","setMode","children","useState","ports","setPorts","selectValue","setSelectValue","get_ports","a","new_ports","useEffect","class","value","onChange","map","port","onClick","set_args","App","flags","setFlags","render_data","get_result","result","console","log","start_app","useInterval","style","height","width","display","flexDirection","alignItems","justifyContent","flag","color","backgroundColor","RealtimeLineChart","props","type","options","chart","zoom","enabled","animations","easing","dynamicAnimation","xaxis","range","yaxis","show","min","max","labels","formatter","val","toFixed","series","dataList","addData","data","time","new_data","length","shift","x","y","Graph","defaultDataList","name","setDataList","get_data","i","Main","mode","get_mode","new_mode","ReactDOM","render","StrictMode","className","document","getElementById"],"mappings":"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","file":"static/js/main.6b3e39d3.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const eel = window[\"eel\"];\r\n\r\nexport default eel;\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport eel from \"./eel\";\r\n\r\nconst Init = ({ setMode, children }) => {\r\n  const [ports, setPorts] = useState();\r\n  const [selectValue, setSelectValue] = useState();\r\n\r\n  const get_ports = async () => {\r\n    const new_ports = await eel.get_ports()();\r\n    setPorts(new_ports);\r\n  };\r\n\r\n  useEffect(() => {\r\n    get_ports();\r\n  }, []);\r\n  if (ports) {\r\n    return (\r\n      <>\r\n        <div>\r\n          <div class=\"row\">\r\n            <div>port select</div>\r\n            <select value={selectValue} onChange={setSelectValue}>\r\n              {ports.map((port) => (\r\n                <option value={port}>{port}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <button\r\n            onClick={() => {\r\n              eel.set_args({ port: selectValue });\r\n              setMode(\"app\");\r\n            }}\r\n          >\r\n            start\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return <div>loading...</div>;\r\n  }\r\n};\r\n\r\nexport default Init;\r\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport eel from \"./eel\";\nimport useInterval from \"use-interval\";\n\nfunction App() {\n  const [flags, setFlags] = useState();\n\n  const render_data = async () => {\n    const result = await eel.get_result()();\n    setFlags(result);\n  };\n\n  useEffect(() => {\n    console.log(\"app load!\");\n    eel.start_app();\n  }, []);\n\n  useInterval(() => {\n    render_data();\n  }, 1000);\n  if (flags) {\n    return (\n      <>\n        <div\n          style={{\n            height: 400,\n            width: 1000,\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          {flags.map((flag) => {\n            const color = flag >= 0.5 ? \"red\" : \"white\";\n            return (\n              <div\n                style={{ width: 190, height: 190, backgroundColor: color }}\n              ></div>\n            );\n          })}\n        </div>\n      </>\n    );\n  } else {\n    return <div>loading...</div>;\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nconst RealtimeLineChart = (props) => {\r\n  const options = {\r\n    chart: {\r\n      height: 500,\r\n      width: 750,\r\n      zoom: {\r\n        enabled: false,\r\n      },\r\n      animations: {\r\n        enabled: true,\r\n        easing: \"linear\",\r\n        dynamicAnimation: {\r\n          enabled: true,\r\n        },\r\n      },\r\n    },\r\n    xaxis: {\r\n      type: \"datetime\",\r\n      range: 2000000,\r\n    },\r\n    yaxis: {\r\n      show: false,\r\n      min: 0,\r\n      max: 200,\r\n      labels: {\r\n        formatter: (val) => val.toFixed(0),\r\n      },\r\n    },\r\n  };\r\n  return <Chart type=\"line\" options={options} series={props.dataList} />;\r\n};\r\n\r\nexport default RealtimeLineChart;\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport eel from \"./eel\";\r\nimport useInterval from \"use-interval\";\r\nimport RealtimeLineChart from \"./RealtimeLineChart\";\r\n\r\nconst addData = (data, time, new_data) => {\r\n  if (data.length > 50) data.shift();\r\n  return [\r\n    ...data,\r\n    {\r\n      x: time,\r\n      y: new_data,\r\n    },\r\n  ];\r\n};\r\n\r\nfunction Graph() {\r\n  const nameList = [\"a\", \"b\", \"c\", \"d\", \"e\"];\r\n  const defaultDataList = nameList.map((name) => ({\r\n    name: name,\r\n    data: [],\r\n  }));\r\n  const [dataList, setDataList] = useState(defaultDataList);\r\n\r\n  const render_data = async () => {\r\n    const new_data = await eel.get_data()();\r\n    console.log(new_data);\r\n    setDataList(\r\n      dataList.map((val, i) => {\r\n        // ラベルごとにデータを更新する\r\n        return {\r\n          name: val.name,\r\n          data: addData(val.data, new_data[0], new_data[i + 1]),\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  useInterval(() => {\r\n    render_data();\r\n  }, 100);\r\n\r\n  if (dataList) {\r\n    return (\r\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[0]]} />\r\n        </div>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[1]]} />\r\n        </div>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[2]]} />\r\n        </div>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[3]]} />\r\n        </div>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[4]]} />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>loading...</div>;\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import \"./App.css\";\r\nimport eel from \"./eel\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Init from \"./Init\";\r\nimport App from \"./App\";\r\nimport Graph from \"./graph\";\r\n\r\nfunction Main() {\r\n  const [mode, setMode] = useState();\r\n  const get_mode = async () => {\r\n    console.log(\"get_mode ok!\");\r\n    const new_mode = await eel.get_mode()();\r\n    console.log(new_mode);\r\n    setMode(new_mode);\r\n  };\r\n\r\n  useEffect(() => {\r\n    get_mode();\r\n  }, []);\r\n\r\n  if (mode === \"init\") {\r\n    return <Init setMode={setMode}></Init>;\r\n  }\r\n  if (mode === \"app\") {\r\n    return (\r\n      <div>\r\n        <App></App>\r\n        <Graph></Graph>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>loading...</div>;\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./App.css\";\nimport Main from \"./Main\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Main></Main>\n      </header>\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}