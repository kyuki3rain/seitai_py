{"version":3,"sources":["reportWebVitals.js","eel.js","Init.js","App.js","RealtimeLineChart.js","graph.js","Main.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","eel","window","modes","data_modes","Init","setMode","children","useState","ports","setPorts","selectValue","setSelectValue","dataValue","setDataValue","modeValue","setModeValue","dataLength","setDataLength","get_ports","a","new_ports","useEffect","class","value","onChange","e","target","map","port","data_mode","mode","type","Number","onClick","set_args","data_length","App","flags","setFlags","render_data","get_result","result","console","log","start_app","useInterval","style","height","width","display","flexDirection","alignItems","justifyContent","flag","color","backgroundColor","RealtimeLineChart","props","options","chart","zoom","enabled","animations","easing","dynamicAnimation","xaxis","range","yaxis","show","min","max","labels","formatter","val","toFixed","series","dataList","addData","data","time","new_data","length","shift","x","y","Graph","defaultDataList","name","setDataList","get_data","i","Main","get_mode","new_mode","ReactDOM","render","StrictMode","className","document","getElementById"],"mappings":"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","file":"static/js/main.2ff3b76e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const eel = window[\"eel\"];\r\n\r\nexport default eel;\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport eel from \"./eel\";\r\n\r\nconst modes = [\"init\", \"app\", \"cal\"]\r\nconst data_modes = [\"serial\", \"test\"]\r\n\r\nconst Init = ({ setMode, children }) => {\r\n  const [ports, setPorts] = useState();\r\n  const [selectValue, setSelectValue] = useState();\r\n  const [dataValue, setDataValue] = useState(\"test\");\r\n  const [modeValue, setModeValue] = useState(\"cal\");\r\n  const [dataLength, setDataLength] = useState(1);\r\n\r\n  const get_ports = async () => {\r\n    const new_ports = await eel.get_ports()();\r\n    setPorts(new_ports);\r\n    setSelectValue(new_ports[0]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    get_ports();\r\n  }, []);\r\n  if (ports) {\r\n    return (\r\n      <>\r\n        <div>\r\n          <div class=\"row\">\r\n            <div>port select</div>\r\n            <select value={selectValue} onChange={(e)=>{\r\n              setSelectValue(e.target.value)\r\n            }}>\r\n              {ports.map((port) => (\r\n                <option value={port}>{port}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div>datamode select</div>\r\n            <select value={dataValue} onChange={(e) =>{\r\n              setDataValue(e.target.value)\r\n              }}>\r\n              {data_modes.map((data_mode) => (\r\n                <option value={data_mode}>{data_mode}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div>mode select</div>\r\n            <select value={modeValue} onChange={(e) => {\r\n              setModeValue(e.target.value)\r\n              }}>\r\n              {modes.map((mode) => (\r\n                <option value={mode}>{mode}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div>mode select</div>\r\n            <input type=\"textarea\" value={dataLength} onChange={(e) => {\r\n              setDataLength(Number(e.target.value))\r\n            }}></input>\r\n          </div>\r\n          <button\r\n            onClick={() => {\r\n              eel.set_args({ \r\n                port: selectValue,\r\n                data_mode: dataValue,\r\n                mode: modeValue,\r\n                data_length: dataLength\r\n               });\r\n               setMode(modeValue);\r\n            }}\r\n          >\r\n            start\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return <div>loading...</div>;\r\n  }\r\n};\r\n\r\nexport default Init;\r\n","import \"./App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport eel from \"./eel\";\r\nimport useInterval from \"use-interval\";\r\n\r\nfunction App() {\r\n  const [flags, setFlags] = useState();\r\n\r\n  const render_data = async () => {\r\n    const result = await eel.get_result()();\r\n    setFlags(result);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"app load!\");\r\n    eel.start_app();\r\n  }, []);\r\n\r\n  useInterval(() => {\r\n    render_data();\r\n  }, 1000);\r\n  if (flags) {\r\n    return (\r\n      <>\r\n        <div\r\n          style={{\r\n            height: 400,\r\n            width: 1000,\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          {flags.map((flag) => {\r\n            const color = flag >= 0.5 ? \"red\" : \"white\";\r\n            return (\r\n              <div\r\n                style={{ width: 190, height: 190, backgroundColor: color }}\r\n              ></div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return <div>loading...</div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nconst RealtimeLineChart = (props) => {\r\n  const options = {\r\n    chart: {\r\n      height: 500,\r\n      width: 750,\r\n      zoom: {\r\n        enabled: false,\r\n      },\r\n      animations: {\r\n        enabled: true,\r\n        easing: \"linear\",\r\n        dynamicAnimation: {\r\n          enabled: true,\r\n        },\r\n      },\r\n    },\r\n    xaxis: {\r\n      type: \"datetime\",\r\n      range: 2,\r\n    },\r\n    yaxis: {\r\n      show: false,\r\n      min: 0,\r\n      max: 200,\r\n      labels: {\r\n        formatter: (val) => val.toFixed(0),\r\n      },\r\n    },\r\n  };\r\n  return <Chart type=\"line\" options={options} series={props.dataList} />;\r\n};\r\n\r\nexport default RealtimeLineChart;\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport eel from \"./eel\";\r\nimport useInterval from \"use-interval\";\r\nimport RealtimeLineChart from \"./RealtimeLineChart\";\r\n\r\nconst addData = (data, time, new_data) => {\r\n  if (data.length > 50) data.shift();\r\n  return [\r\n    ...data,\r\n    {\r\n      x: time,\r\n      y: new_data,\r\n    },\r\n  ];\r\n};\r\n\r\nfunction Graph() {\r\n  const nameList = [\"a\", \"b\", \"c\", \"d\", \"e\"];\r\n  const defaultDataList = nameList.map((name) => ({\r\n    name: name,\r\n    data: [],\r\n  }));\r\n  const [dataList, setDataList] = useState(defaultDataList);\r\n\r\n  const render_data = async () => {\r\n    const new_data = await eel.get_data()();\r\n    console.log(new_data);\r\n    setDataList(\r\n      dataList.map((val, i) => {\r\n        // ラベルごとにデータを更新する\r\n        return {\r\n          name: val.name,\r\n          data: addData(val.data, new_data[0], new_data[i + 1]),\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  useInterval(() => {\r\n    render_data();\r\n  }, 100);\r\n\r\n  if (dataList) {\r\n    return (\r\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[0]]} />\r\n        </div>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[1]]} />\r\n        </div>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[2]]} />\r\n        </div>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[3]]} />\r\n        </div>\r\n        <div style={{ width: 200, height: 150 }}>\r\n          <RealtimeLineChart dataList={[dataList[4]]} />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>loading...</div>;\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import \"./App.css\";\r\nimport eel from \"./eel\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Init from \"./Init\";\r\nimport App from \"./App\";\r\nimport Graph from \"./graph\";\r\nimport useInterval from \"use-interval\";\r\n\r\nfunction Main() {\r\n  const [mode, setMode] = useState();\r\n  const get_mode = async () => {\r\n    console.log(\"get_mode ok!\");\r\n    const new_mode = await eel.get_mode()();\r\n    console.log(new_mode);\r\n    setMode(new_mode);\r\n  };\r\n\r\n  useEffect(() => {\r\n    get_mode();\r\n  }, []);\r\n  useEffect(()=>{\r\n    if(mode === \"cal\"){\r\n      eel.start_app();\r\n    }\r\n  },[mode])\r\n  useInterval(() => {\r\n    if (mode == \"cal\") {\r\n      get_mode();\r\n    }\r\n  }, 1000);\r\n\r\n  if (mode === \"init\") {\r\n    return <Init setMode={setMode}></Init>;\r\n  }\r\n  if (mode === \"app\") {\r\n    return (\r\n      <div>\r\n        <App></App>\r\n        <Graph></Graph>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>loading...</div>;\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"./App.css\";\r\nimport Main from \"./Main\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Main></Main>\r\n      </header>\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}